[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ha-dali-center"
version = "0.7.0"
description = "Home Assistant custom integration for Dali Center lighting control systems"
authors = [{ name = "maginawin" }, { name = "niracler" }]
requires-python = ">=3.13.0"
dependencies = [
    "homeassistant>=2023.1.0",
    "async_timeout>=4.0.0",
    "voluptuous",
    "PySrDaliGateway==0.11.2",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.16.0",
    "ruff>=0.12.1",
    "pre-commit",
]

[tool.setuptools.packages.find]
include = ["custom_components*"]

[tool.ruff]
required-version = ">=0.12.1"

[tool.ruff.lint]
select = [
    "A001",   # Variable {name} is shadowing a Python builtin
    "ASYNC",  # flake8-async
    "B002",   # Python does not support the unary prefix increment
    "B007",   # Loop control variable {name} not used within loop body
    "B014",   # Exception handler with duplicate exception
    "B023",   # Function definition does not bind loop variable {name}
    "B026",   # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904",   # Use raise from to specify exception cause
    "C",      # complexity
    "D",      # docstrings
    "E",      # pycodestyle
    "F",      # pyflakes/autoflake
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "N804",   # First argument of a class method should be named cls
    "N805",   # First argument of a method should be named self
    "N815",   # Variable {name} in class scope should not be mixedCase
    "PERF",   # Perflint
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "PYI",    # flake8-pyi
    "RET",    # flake8-return
    "RUF005", # Consider iterable unpacking instead of concatenation
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "RUF100", # Unused `noqa` directive
    "S102",   # Use of exec detected
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "T100",   # Trace found: {name} used
    "T20",    # flake8-print
    "TC",     # flake8-type-checking
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # pycodestyle
]

ignore = [
    "D202",    # No blank lines allowed after function docstring
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "E501",    # line too long
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "RUF001",  # String contains ambiguous unicode character.
    "RUF002",  # Docstring contains ambiguous unicode character.
    "RUF003",  # Comment contains ambiguous unicode character.
    "SIM102",  # Use a single if statement instead of nested if statements
    "SIM103",  # Return the condition {condition} directly
    "SIM108",  # Use ternary operator {contents} instead of if-else-block
    "TC001",   # Move application import {} into a type-checking block
    "TC002",   # Move third-party import {} into a type-checking block
    "TC003",   # Move standard library import {} into a type-checking block
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
voluptuous = "vol"

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["homeassistant"]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"custom_components/dali_center/const.py" = [
    "D", # pydocstyle  
]

[tool.mypy]
python_version = "3.13"
platform = "linux"
show_error_codes = true
follow_imports = "normal"
local_partial_types = true
strict_equality = true
strict_bytes = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
enable_error_code = [
    "deprecated",
    "ignore-without-code",
    "redundant-self",
    "truthy-iterable",
]
disable_error_code = [
    "annotation-unchecked",
    "import-not-found",
    "import-untyped",
]
extra_checks = false
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "custom_components.dali_center.*"
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
warn_return_any = false
warn_unreachable = false
